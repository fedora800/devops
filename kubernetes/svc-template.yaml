apiVersion: v1
kind: Service
metadata:
  name: svc-clusterip
spec:
  type: ClusterIP                  # only accessible within the k8s cluster, so we will need to create a pod and connect into it to curl to this service
  selector:                        # this criteria determines which pods this service will route traffic to
    tier: frontend

  ports:
    - protocol: TCP
      port: 80                     # port that this SERVICE is LISTENING on
      targetPort: 80               # port that this service ROUTING to (ie port defined as containerPort in the target POD spec)

# note here that labels is none for this ClusterIP service and endpoints are set based off the selector criteria match
# $ kubectl get service --show-labels
# NAME                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE    SELECTOR        LABELS
# svc-clusterip       ClusterIP   10.109.92.152    <none>        80/TCP         19s    tier=frontend   <none>
# $ kubectl get service svc-clusterip
# 
# Name:              svc-clusterip
# Namespace:         default
# Labels:            <none>
# Annotations:       <none>
# Selector:          tier=frontend
# Type:              ClusterIP
# IP Family Policy:  SingleStack
# IP Families:       IPv4
# IP:                10.109.92.152
# IPs:               10.109.92.152
# Port:              <unset>  80/TCP
# TargetPort:        80/TCP
# Endpoints:         192.168.16.7:80,192.168.185.34:80,192.168.185.45:80
# Session Affinity:  None
# Events:            <none>
# $ kubectl endpoints svc-clusterip
# NAME            ENDPOINTS                                             AGE
# svc-clusterip   192.168.16.7:80,192.168.185.34:80,192.168.185.45:80   4m7s


