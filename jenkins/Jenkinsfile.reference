pipeline {

    //agent any
    //agent none           //if we want to specify different agents for different stages, we can set none here and then the agent under the stage

    agent {
        label 'linux-agents'
    }   

    // below needs to be configured first
    tools {
        maven 'jenkins-maven-3.8.6'
        jdk   'jenkins-jdk-11'
    }   

    // Key value pairs which helps passing values to job during job runtime from outside of Jenkinsfile. Itâ€™s one way of externalizing configuration.
    /* Note - 2 other ways
       env variables can also be defined on the jenkins portal via Manage Jenkins > System Configuration > Configure System > Global Properties > Environment Variables
       Initialize Environment variables using sh scripts in Jenkinsfile
    */  
    environment {
        TEST_PREFIX = "test-IMAGE"
        TEST_IMAGE = "${env.TEST_PREFIX}:${env.BUILD_NUMBER}"
        TEST_CONTAINER = "${env.TEST_PREFIX}-${env.BUILD_NUMBER}"
        REGISTRY_ADDRESS = "my.registry.address.com"

        SLACK_CHANNEL = "#deployment-notifications"
        SLACK_TEAM_DOMAIN = "MY-SLACK-TEAM"
        SLACK_TOKEN = credentials("slack_token")
        DEPLOY_URL = "https://deployment.example.com/"

        COMPOSE_FILE = "docker-compose.yml"
        REGISTRY_AUTH = credentials("docker-registry")
        STACK_PREFIX = "my-project-stack-name"
    }   

    // different types of parameters that can be set 
    // The parameters directive provides a way for Jenkins job to interact with Jenkins CI/CD users during the running of the build job.
    // we will see 'Build with Parameters' on the build and we will need to input values in the below prompts on the web page before we proceed.
    parameters {
        string(name: 'NAME', description: 'Please tell me your name?')
        text(name: 'DESC', description: 'Describe about the job details')
        booleanParam(name: 'SKIP_TEST', description: 'Want to skip running Test cases?')
        choice(name: 'BRANCH', choices: ['Master', 'Dev'], description: 'Choose branch')
        password(name: 'SONAR_SERVER_PWD', description: 'Enter SONAR password')
    }   

   stages {

        // stage-initialization
        stage('Initialization') {
            environment { 
                   JOB_TIME = sh (returnStdout: true, script: "date '+%F %T'").trim()
            }   
            steps {
                sh 'echo $JOB_TIME'
            }   
        }   

        // stage-print-params
        stage('Printing Parameters') {
            steps {
                echo "Hello ${params.NAME}"
                echo "Job Details: ${params.DESC}"
                echo "Skip Running Test case ?: ${params.SKIP_TEST}"
                echo "Branch Choice: ${params.BRANCH}"
                echo "SONAR Password: ${params.SONAR_SERVER_PWD}"
            }
        }

        // stage-groovy-logic
        stage('Stage with Groovy code logic') {
            steps {
                script {
                    def name = "${params.NAME}"
                    def branch = "${params.BRANCH}"
                    if(branch == "Master") {
                        echo "hello $name, branch is $branch"
                    } else {
                        echo "hello $name, branch is (not master) $branch"
                    }
                }
            }
        }


        // stage-prepare
        stage("Prepare") {
            steps {
                bitbucketStatusNotify buildState: "INPROGRESS"
            }
        }

        // stage-git-repo-and-downloads
        stage('git repo connect and download files') { 
            //agent linux-agents   // if we want this specific stage to run on this labelled hosts
            steps {
                script {
                         // Get some code from a GitHub repository
                         try{
                           // Get some code from a GitHub repository
                           #git 'https://github.com/LambdaTest/nightwatch-selenium-sample.git'
                           git url: 'https://github.com/naiveskill/devops.git', branch: 'main' 
                           //Download Tunnel Binary
                           sh "wget https://s3.amazonaws.com/lambda-tunnel/LT_Linux.zip"
                      
                           //Required if unzip is not installed
                           sh 'sudo apt-get install --no-act unzip'
                           sh 'unzip -o LT_Linux.zip'
                      
                         }
                         catch (err){
                           echo err
                         }
                }
             }
        }

        // stage-scm-checkout
        stage("SCM Checkout") {
        steps { echo "SCM Checkout"  }
        }

        // stage-build
        stage("Build and start test image") {
            steps {
                sh "docker-composer build"
                sh "docker-compose up -d"
            }
        }

        // stage-code-review
        stage("Code Review") {
        steps { echo "Code Review"  }
        }

        // stage-test
        /* can comprise of many different testing stages
           or even as many steps of a single test stage
        */
        stage("Unit Test") {
        steps { echo "Unit Test"  }
        }

        // stage-integration-test-1
        stage("Integration Test 1") {
        steps { echo "Integration Test 1"  }
        }

        // stage-smoke-test
        stage("Smoke Test") {
        steps { echo "Smoke Test"  }
        }

        // stage-end-to-end-test
        stage("End to End Test") {
        steps { echo "End to End Test"  }
        }

        // stage-metric-check
        stage("Metrics Check") {
        steps { echo "Metrics Check"  }
        }

        // stage-package
        stage("Package") {
        steps { echo "Package"  }
        }

        // stage-deploy
        stage("Deploy") {
        steps { echo "Deploy"  }
        }

        stage("Run tests") {
            steps {
                sh "docker-compose exec -T php-fpm composer --no-ansi --no-interaction tests-ci"
                sh "docker-compose exec -T php-fpm composer --no-ansi --no-interaction behat-ci"
            }

            post {
                always {
                    junit "build/junit/*.xml"
                    step([
                            $class              : "CloverPublisher",
                            cloverReportDir     : "build/coverage",
                            cloverReportFileName: "clover.xml"
                    ])
                }
            }
        }

        stage("Determine new version") {
            // Acts like if condition to decide whether to run the particular stage or not
            when {
                branch "master"
            }

            steps {
                script {
                    env.DEPLOY_VERSION = sh(returnStdout: true, script: "docker run --rm -v '${env.WORKSPACE}':/repo:ro softonic/ci-version:0.1.0 --compatible-with package.json").trim()
                    env.DEPLOY_MAJOR_VERSION = sh(returnStdout: true, script: "echo '${env.DEPLOY_VERSION}' | awk -F'[ .]' '{print \$1}'").trim()
                    env.DEPLOY_COMMIT_HASH = sh(returnStdout: true, script: "git rev-parse HEAD | cut -c1-7").trim()
                    env.DEPLOY_BUILD_DATE = sh(returnStdout: true, script: "date -u +'%Y-%m-%dT%H:%M:%SZ'").trim()

                    env.DEPLOY_STACK_NAME = "${env.STACK_PREFIX}-v${env.DEPLOY_MAJOR_VERSION}"
                    env.IS_NEW_VERSION = sh(returnStdout: true, script: "[ '${env.DEPLOY_VERSION}' ] && echo 'YES'").trim()
                }
            }
        }

        stage("Create new version") {
            when {
                branch "master"
                environment name: "IS_NEW_VERSION", value: "YES"
            }

            steps {
                script {
                    sshagent(['ci-ssh']) {
                        sh """
                            git config user.email "ci-user@email.com"
                            git config user.name "Jenkins"
                            git tag -a "v${env.DEPLOY_VERSION}" \
                                -m "Generated by: ${env.JENKINS_URL}" \
                                -m "Job: ${env.JOB_NAME}" \
                                -m "Build: ${env.BUILD_NUMBER}" \
                                -m "Env Branch: ${env.BRANCH_NAME}"
                            git push origin "v${env.DEPLOY_VERSION}"
                        """
                    }
                }

                sh "docker login -u=$REGISTRY_AUTH_USR -p=$REGISTRY_AUTH_PSW ${env.REGISTRY_ADDRESS}"
                sh "docker-compose -f ${env.COMPOSE_FILE} build"
                sh "docker-compose -f ${env.COMPOSE_FILE} push"
            }
        }

        // stage-docker-build
        stage('Build and Publish Docker Image') {
            when {
                branch 'master'  //only run these steps on the master branch
            }
            steps {
                /*
                 * Multiline strings can be used for larger scripts. It is also possible to put scripts in your shared library
                 * and load them with 'libaryResource'
                 */
                sh """
          docker build -t ${IMAGE} .
          docker tag ${IMAGE} ${IMAGE}:${VERSION}
          docker push ${IMAGE}:${VERSION}
        """
            }
            post {
                failure {
                    // notify users when this step fails
                    mail to: 'team@example.com',
                            subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                            body: "Something is wrong with ${env.BUILD_URL}"
                }
            }
        }

        // stage-deploy-prod
        stage("Deploy to production") {
            agent { node { label "swarm-prod" } }

            when {
                branch "master"
                environment name: "IS_NEW_VERSION", value: "YES"
            }

            steps {
                sh "docker login -u=$REGISTRY_AUTH_USR -p=$REGISTRY_AUTH_PSW ${env.REGISTRY_ADDRESS}"
                sh "docker stack deploy ${env.DEPLOY_STACK_NAME} -c ${env.COMPOSE_FILE} --with-registry-auth"
            }

            post {
                success {
                    slackSend(
                            teamDomain: "${env.SLACK_TEAM_DOMAIN}",
                            token: "${env.SLACK_TOKEN}",
                            channel: "${env.SLACK_CHANNEL}",
                            color: "good",
                            message: "${env.STACK_PREFIX} production deploy: *${env.DEPLOY_VERSION}*. <${env.DEPLOY_URL}|Access service> - <${env.BUILD_URL}|Check build>"
                    )
                }

                failure {
                    slackSend(
                            teamDomain: "${env.SLACK_TEAM_DOMAIN}",
                            token: "${env.SLACK_TOKEN}",
                            channel: "${env.SLACK_CHANNEL}",
                            color: "danger",
                            message: "${env.STACK_PREFIX} production deploy failed: *${env.DEPLOY_VERSION}*. <${env.BUILD_URL}|Check build>"
                    )
                }
            }
        }


        // stage-monitor
        stage("Monitor") {
            steps { echo "Monitor"  }
        }

    } // end-stages

    // do below post all the stages
    post {
        always {
            sh "docker-compose down || true"
        }

        success {
            bitbucketStatusNotify buildState: "SUCCESSFUL"
        }

        failure {
          // notify users when the Pipeline fails
          mail to: 'team@example.com',
          subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
          body: "Something is wrong with ${env.BUILD_URL}"
    }
    }

}

